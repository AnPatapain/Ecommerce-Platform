#!/bin/bash


if [[ "$*" =~ "help" ]]; then
  echo ""
  echo "Snowpack platforms script"
  echo "Maintainer: xuanson.nguyen@snowpack.eu"
  echo ""
  echo "How to use:"
  echo "./run.sh [test] [prod] [reset] [ephemeral]"
  echo ""
  echo "Examples:"
  echo "  ./run.sh            Run as development, local database, with hot reload"
  echo "  ./run.sh test       Run test, as development, local database, no hot reload"
  echo "  ./run.sh prod       Run as production, local database, no hot reload"
  echo "  ./run.sh ephemeral  Run as ephemeral, for CPP integration test"
  echo "  ./run.sh reset      Reset local database and remove node_modules"
  echo ""
  exit 0
fi

BASEDIR="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
export PROJECT_ROOT="${BASEDIR}/.."

if [[ -z "${RUNNING_ON_CI}" ]]; then
  if [ "$EUID" -eq 0 ]; then
    echo ""
    echo "ERROR: This script must NOT be run as root"
    echo "If you run into permission without sudo, please follow steps below:"
    echo ""
    echo "Step 1: Run this command:"
    echo "        sudo usermod -aG docker \$USER"
    echo ""
    echo "Step 2: Reboot your computer"
    echo ""
    exit 1
  fi

  if ! command -v docker &> /dev/null; then
    echo ""
    echo "ERROR: Docker is not installed on your system"
    echo ""
    echo "To install Docker, use the commands below:"
    echo "  wget -qO- https://get.docker.com/ | sh"
    echo "  sudo usermod -aG docker \$USER"
    echo "  sudo reboot"
    echo ""
    exit 1
  fi
fi

####################################################

# create the .env if needed 
if [[ ! -e $PROJECT_ROOT/.env ]]; then
  touch $PROJECT_ROOT/.env
fi

####################################################

cd $PROJECT_ROOT

export DOCKER_UID="$UID"
export DOCKER_APP_CMD="npm i && npm run dev"
if [[ "$*" =~ "test" ]]; then
  export DOCKER_APP_CMD="npm i && npm run test"
fi

if [[ "$*" =~ "reset" ]]; then
  export DOCKER_UID="$UID"
  docker compose -f scripts/docker-compose_local.yml down
  sudo rm -rf .data node_modules
  echo "Local database and node_modules have been reset"
  exit 0

elif [[ "$*" =~ "ephemeral" ]]; then
  if [ ! -z "$CI_JOB_TOKEN" ]; then
    # If we are running on CI (i.e. CPP integration test), we pull the image from platform API project, without building it
    REMOTE_IMAGE="$CI_REGISTRY/snowpack/vipn/sno-platform/snowpack-platform:ephemeral"
    docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    docker pull $REMOTE_IMAGE
    # rename image
    docker rmi -f snowpack_platform_ephemeral:latest || echo '(Error can be ignored)'
    docker tag $REMOTE_IMAGE snowpack_platform_ephemeral:latest
    # clean up old image
    docker image prune -f
  else
    # else, we build the image locally
    docker compose -f scripts/docker-compose_ephemeral.yml build
  fi
  docker compose -f scripts/docker-compose_ephemeral.yml down -t 1
  docker compose -f scripts/docker-compose_ephemeral.yml up --remove-orphans -d
  docker run --rm --network host snowpack_platform_ephemeral node /app/scripts/wait-until-platform-ready.cjs

elif [[ "$*" =~ "stop" ]]; then
  docker compose -f scripts/docker-compose_local.yml down -t 1
  docker compose -f scripts/docker-compose_ephemeral.yml down -t 1

else
  mkdir -p node_modules
  docker compose -f scripts/docker-compose_local.yml up --remove-orphans -d
  docker compose -f scripts/docker-compose_local.yml logs -f snowpack_platform_dev
  docker compose -f scripts/docker-compose_local.yml down -t 1
fi


# Docker compose for running in local computer (development)
# To use it:
# docker compose -f docker-compose_local.yml up

version: "2.4"
services:
  snowpack_platform_dev:
    container_name: snowpack_platform_dev
    image: node:18.18-bullseye
    command: /bin/bash -c "cd ${PROJECT_ROOT} && ${DOCKER_APP_CMD}"
    privileged: true
    volumes:
      - .:/app
      - ./ssl:/ssl
      - /tmp/snowpack/node_modules:/app/node_modules
      - "${PROJECT_ROOT}:${PROJECT_ROOT}:Z"
    environment:
      CONTAINER_TYPE: local
      DEBUG: "true"
    ports:
      - "80:80"
      - "443:443"
      - "3031:443"
      - "3032:443"
    depends_on:
      - snowpack_platform_dev_mongo
    env_file:
      - ../.env
    user: "${DOCKER_UID}:${DOCKER_UID}"
  
  snowpack_platform_dev_mongo:
    container_name: snowpack_platform_dev_mongo
    image: mongo:4.4
    volumes:
      - "${PROJECT_ROOT}/.data/db:/data/db:Z"
      - "${PROJECT_ROOT}/.data/configdb:/data/configdb:Z"
    environment:
      MONGO_INITDB_ROOT_USERNAME: snowpack_platform_dev
      MONGO_INITDB_ROOT_PASSWORD: snowpack_platform_dev
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,size=1G
    privileged: true

  # GUI dev
  mongo-express:
    container_name: mongo-express
    image: mongo-express:1.0.0-alpha
    ports:
      - 10001:8081
    environment:
      ME_CONFIG_OPTIONS_EDITORTHEME: ambiance
      ME_CONFIG_MONGODB_URL: mongodb://snowpack_platform_dev:snowpack_platform_dev@snowpack_platform_dev_mongo:27017/
    depends_on:
      - snowpack_platform_dev_mongo
    # add 10 seconds of delay for mongodb server to setup
    command: "/bin/bash -c \"sleep 10; tini -- /docker-entrypoint.sh mongo-express\""
    read_only: true